System info
===========

anansi and aragog are ASRockRack 1U4LW-X570/2L2T RPSUs, each with a
12-core AMD Ryzen 9 5900X, 64G ECC RAM, two 10Gb Intel X550-AT2 NICs,
two 1Gb Intel i210 NICs, two 1863G NVMe SSDs and two 16.4T HDDs.

The integrated BMC is configured to redirect the UEFI console to a virtual
8250 serial port ttyS1 (port 0x2f8, irq 3, 115200n8), exported over IPMI
lanplus for remote installation and maintenance. This serial interface is
also used as the Linux console once the kernel starts.

The drives are each GPT partitioned into a 512M vfat boot partition and
an LVM2 PV, with the boot partitions mounted at /boot/* and the kernel
booted directly from /boot/*/efi/boot/bootx64.efi by the UEFI BIOS.

An initramfs boot/ramfs.cpio is built by ramfs/build and compiled into
the kernel. It activates the LVM volume groups before mounting /dev/*/root
as the root filesystem, assuming this exists and is unique. It also offers
a chance to interrupt boot and enter a maintenance shell for system repair.

The command line

  console=tty0 console=ttyS1,115200n8 loglevel=2

is also compiled into the kernel to avoid the need for manually-configured
UEFI boot entries.

The four LVM2 PVs are combined into a volume group /dev/$(hostname),
with /dev/$(hostname)/root as a 64G ext4 root filesystem. We use 1G zram
swap to limit SSD wear.


Upstream firmware binaries
--------------------------

The CPU microcode firmware/amd-ucode/*.bin and wifi firmware ath9k_htc/*.fw
are obtained from

  https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git

The firmware/regulatory.db database is obtained from

  https://git.kernel.org/pub/scm/linux/kernel/git/sforshee/wireless-regdb.git

The firmware/bios/ directory contains a flash image for the deployed version
of the manufacturer's UEFI BIOS.


BIOS and BMC configuration
--------------------------

UEFI version: X570D4U-2L2T L1.74
BMC version: 3.04.00

From BIOS defaults:

  - Main
      - Set time and date to UTC
  - Advanced
      - Chipset configuration
          - Above 4G decoding: enabled
          - SR-IOV support: enabled
          - Re-size BAR support: auto
          - Restore AC power loss: power on
      - Storage configuration
          - SATA hotplug: enabled
      - USB configuration
          - Legacy USB support: UEFI setup only
      - Serial port console redirection
          - COM1 console redirection: enabled
          - COM1 console redirection settings
              - Terminal type: VT-UTF8
              - Resolution 100x31: enabled
          - SOL console redirection: enabled
          - SOL console redirection settings
              - Terminal type: VT-UTF8
              - Resolution 100x31: enabled
      - Network stack configuration
          - Network stack: disabled
      - AMD overclocking
          - Precision boost overdrive
              - Precision boost overdrive: advanced
              - Platform thermal throttle limit: manual, 75
  - Server management
      - BMC network configuration
        - Bonding status: disabled
        - Interfaces: eth0 enabled, eth1 disabled
        - Manual setting IPMI LAN: yes
        - Configuration address source: static
        - Station IP address: 10.10.10.1 / 10.10.10.2
        - Current subnet mask: 255.255.255.0
        - VLAN: disabled
        - IPv6 support: disabled for eth0 and eth1
  - Boot
      - Boot option filter: UEFI only
      - Boot beep: enabled

Note: do not enable fast boot. This makes it impossible to return to the
setup menu as the serial console isn't initialised quickly enough.

From BMC defaults:

  - Reset admin password on first login
  - Configuration
      - Date & time
          - Set correct time with zone Etc/GMT
      - Services
          - Disable all except 'web', 'kvm' and 'vnc'
      - User management
          - Leave 'admin' (#2) user enabled with administrator privileges
          - Disable 'Administrator' (#3) user access and privileges


Partitioning and filesystems
----------------------------

Create the GPT label and partitions:

  for DEVICE in /dev/nvme[01]n1 /dev/sd[ab]; do
    sfdisk $DEVICE <<< 'label: gpt'
    sfdisk -a $DEVICE <<< 'size=512M, type=uefi, name=boot'
    sfdisk -a $DEVICE <<< 'size=+, type=lvm'
  done

Make the EFI filesystems:

  for DEVICE in /dev/nvme[01]n1p1 /dev/sd[ab]1; do
    mkfs.vfat -n boot $DEVICE
  done

Initialise the PV partitions and create the VG:

  lvm vgcreate /dev/$(hostname) /dev/nvme[01]n1p2 /dev/sd[ab]2

Tag SSD and HDD PVs appropriately:

  lvm pvchange --addtag ssd /dev/nvme[01]n1p2
  lvm pvchange --addtag hdd /dev/sd[ab]2

Create the RAID1 root LV on the SSD PVs then make the root filesystem:

  lvm lvcreate -m 1 -n root -L 64G /dev/anansi @ssd
  mkfs.ext4 -L root -O project,quota /dev/anansi/root

Copy the combined kernel and initramfs to /boot/*/efi/boot/bootx64.efi
as well as /boot/*/linux.efi so the BIOS will use it as the default
bootloader for each drive.
